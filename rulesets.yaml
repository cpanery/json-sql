---

$id: "https://raw.githubusercontent.com/iamalnewkirk/json-sql/master/rulesets.yaml"
$schema: "https://json-schema.org/draft/2019-09/schema"

oneOf:
  - $ref: '#/definitions/query'
  - $ref: '#/definitions/transaction'

definitions:
  literal:
    title: literal
    type:
      - string
      - number
      - integer
      - boolean
      - 'null'
    x-examples:
      example-1: secret
      example-2: 12345
      example-3: 1.2345
      example-4: -12345
      example-5: false
      example-6: true
      example-7: null
    description: LITERAL represents acceptable raw SQL data types.
    x-tags:
      - expression
  binding:
    title: binding
    type: object
    x-examples:
      example-1:
        bind: token
      example-2:
        bind: uuid
    properties:
      bind:
        type: string
        maxLength: 255
    required:
      - bind
    description: BINDING is an EXPRESSION which represents is a named-placeholder to be substituted later.
    x-tags:
      - expression
  column:
    title: column
    type: object
    x-examples:
      example-1:
        column: id
      example-2:
        column: created
    properties:
      column:
        type: string
        maxLength: 255
      alias:
        type: string
        maxLength: 255
    required:
      - column
    description: COLUMN represents TABLE column reference.
    x-tags:
      - reference
  binary:
    title: binary
    type: object
    x-examples:
      example-1:
        binary:
          plus:
            - 123
            - 1
      example-2:
        binary:
          minus:
            - 123
            - 1
      example-3:
        binary:
          plus:
            - column: count
            - 1
      example-4:
        binary:
          minus:
            - column: count
            - 1
      example-5:
        binary:
          multiply:
            - 25
            - 25
      example-6:
        binary:
          divide:
            - 100
            - 5
      example-7:
        binary:
          modulo:
            - 29
            - 9
    description: BINARY is an EXPRESSION which uses the first and second EXPRESSION to perform a binary operation.
    x-tags:
      - expression
    properties:
      binary:
        oneOf:
          - properties:
              plus:
                type: array
                minItems: 2
                maxItems: 2
                items:
                  $ref: '#/definitions/expression'
            required:
              - plus
          - properties:
              minus:
                type: array
                minItems: 2
                maxItems: 2
                items:
                  $ref: '#/definitions/expression'
            required:
              - minus
          - properties:
              multiply:
                type: array
                minItems: 2
                maxItems: 2
                items:
                  $ref: '#/definitions/expression'
            required:
              - multiply
          - properties:
              divide:
                type: array
                minItems: 2
                maxItems: 2
                items:
                  $ref: '#/definitions/expression'
            required:
              - divide
          - properties:
              modulo:
                type: array
                minItems: 2
                maxItems: 2
                items:
                  $ref: '#/definitions/expression'
            required:
              - modulo
        type: object
    required:
      - binary
  unary:
    title: unary
    type: object
    properties:
      unary:
        oneOf:
          - properties:
              plus:
                $ref: '#/definitions/expression'
            required:
              - plus
          - properties:
              minus:
                $ref: '#/definitions/expression'
            required:
              - minus
        type: object
    required:
      - unary
    x-examples:
      example-1:
        unary:
          plus: 1000
      example-2:
        unary:
          plus:
            column: amount
      example-3:
        unary:
          minus: 1000
      example-4:
        unary:
          minus:
            column: amount
    description: UNARY is an EXPRESSION which uses the first EXPRESSION to perform a unary operation.
    x-tags:
      - expression
  function:
    title: function
    type: object
    properties:
      func:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/expression'
    required:
      - func
    x-examples:
      example-1:
        func:
          - 'true'
      example-2:
        func:
          - 'false'
      example-3:
        func:
          - date
          - now
    description: FUNCTION is an EXPRESSION which represents a built-in SQL function.
    x-tags:
      - expression
  expression:
    oneOf:
      - $ref: '#/definitions/literal'
      - $ref: '#/definitions/column'
      - $ref: '#/definitions/function'
      - $ref: '#/definitions/binding'
      - $ref: '#/definitions/binary'
      - $ref: '#/definitions/unary'
      - $ref: '#/definitions/cast'
      - $ref: '#/definitions/case'
    title: expression
    x-examples:
      example-1: 123
      example-2:
        column: id
      example-3:
        func:
          - 'true'
      example-4:
        func:
          - 'false'
      example-5:
        bind: login
      example-6:
        binary:
          plus:
            - 1
            - 1
      example-7:
        unary:
          plus: 1
      example-8:
        cast:
          - 12.34
          - int
      example-9:
        case:
          when:
            - cond:
                eq:
                  - 1
                  - 1
              then: 1
          else: 0
    description: EXPRESSION represents a valid SQL expression.
    x-tags:
      - expression
  criteria:
    title: criteria
    description: CRITERIA is a set of rules (criterion) which can be combined to create conditions and clauses which filter SQL datasets.
    oneOf:
      - $ref: '#/definitions/criterion-in'
      - $ref: '#/definitions/criterion-is-null'
      - $ref: '#/definitions/criterion-not-null'
      - $ref: '#/definitions/criterion-eq'
      - $ref: '#/definitions/criterion-glob'
      - $ref: '#/definitions/criterion-gt'
      - $ref: '#/definitions/criterion-gte'
      - $ref: '#/definitions/criterion-like'
      - $ref: '#/definitions/criterion-lte'
      - $ref: '#/definitions/criterion-lt'
      - $ref: '#/definitions/criterion-ne'
      - $ref: '#/definitions/criterion-regexp'
      - $ref: '#/definitions/criterion-and'
      - $ref: '#/definitions/criterion-or'
    x-examples:
      example-1:
        in:
          - column: theme
          - light
          - dark
      example-2:
        is-null:
          column: deleted
      example-3:
        not-null:
          column: deleted
      example-4:
        eq:
          - column: role
          - admin
      example-5:
        glob:
          - column: filename
          - '*.txt'
      example-6:
        gt:
          - column: total
          - 1.23
      example-7:
        gte:
          - column: total
          - 1.23
      example-8:
        like:
          - column: email
          - '%@example.com'
      example-9:
        lte:
          - column: total
          - 1.23
      example-10:
        lt:
          - column: total
          - 1.23
      example-11:
        ne:
          - column: status
          - unknown
      example-12:
        regexp:
          - column: username
          - ^admin$
      example-13:
        and:
          - eq:
              - column: role
              - guest
          - not-null:
              column: verified
      example-14:
        or:
          - eq:
              - column: role
              - guest
          - eq:
              - column: role
              - user
    x-tags:
      - criteria
  cast:
    title: cast
    type: object
    properties:
      cast:
        type: array
        minItems: 2
        maxItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - cast
    x-examples:
      example-1:
        cast:
          - 12.34
          - int
      example-2:
        cast:
          - '2020-01-01'
          - datetime
      example-3:
        cast:
          - func:
              - date
              - now
          - varchar
    description: CAST is an EXPRESSION which specifies a conversion from one data type to another.
    x-tags:
      - expression
  criterion-between:
    title: criterion-between
    type: object
    properties:
      between:
        type: array
        minItems: 2
        maxItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - between
    x-examples:
      example-1:
        between:
          - column: created
          - column: updated
      example-2:
        between:
          - column: created
          - func:
              - date
              - now
      example-3:
        between:
          - column: created
          - func:
              - date
              - now
      example-4:
        between:
          - func:
              - datetime
              - 1092941466
              - unixepoch
          - func:
              - date
              - now
    description: CRITERION-BETWEEN is a criterion which requires the first EXPRESSION to exist within the range that exists between the second and third EXPRESSION.
    x-tags:
      - criteria
  case:
    title: case
    type: object
    properties:
      case:
        type: object
        required:
          - when
          - else
        properties:
          when:
            type: array
            minItems: 1
            items:
              type: object
              properties:
                cond:
                  oneOf:
                    - $ref: '#/definitions/criteria'
                    - $ref: '#/definitions/expression'
                then:
                  $ref: '#/definitions/expression'
          else:
            $ref: '#/definitions/expression'
    required:
      - case
    x-examples:
      example-1:
        case:
          when:
            - cond:
                eq:
                  - admin
                  - admin
              then: admin
          else: user
      example-2:
        case:
          when:
            - cond:
                eq:
                  - column: role
                  - admin
              then: 1
          else: 0
      example-3:
        case:
          when:
            - cond:
                eq:
                  - column: role
                  - admin
              then: 1
            - cond:
                eq:
                  - column: role
                  - manager
              then: 2
          else: 0
    description: CASE is an EXPRESSION which provides a mechanism for declaring conditional expressions.
    x-tags:
      - expression
  criterion-in:
    title: criterion-in
    type: object
    description: 'CRITERION-IN is a criterion which represents an "is included in the set" comparison operation.'
    properties:
      in:
        type: array
        minItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - in
    x-examples:
      example-1:
        in:
          - column: theme
          - light
          - dark
    x-tags:
      - criteria
  criterion-is-null:
    title: criterion-is-null
    type: object
    properties:
      is-null:
        $ref: '#/definitions/expression'
    required:
      - is-null
    x-examples:
      example-1:
        is-null:
          column: deleted
    description: 'CRITERION-IS-NULL is a criterion which represents an "is null" comparison operation.'
    x-tags:
      - criteria
  criterion-not-null:
    title: criterion-not-null
    type: object
    properties:
      not-null:
        $ref: '#/definitions/expression'
    required:
      - not-null
    x-examples:
      example-1:
        not-null:
          column: deleted
    description: 'CRITERION-NOT-NULL is a criterion which represents an "is not null" comparison operation.'
    x-tags:
      - criteria
  criterion-eq:
    title: criterion-eq
    type: object
    properties:
      eq:
        type: array
        minItems: 2
        maxItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - eq
    x-examples:
      example-1:
        eq:
          - column: role
          - admin
    description: 'CRITERION-EQ is a criterion which represents an "equal" comparison operation.'
    x-tags:
      - criteria
  criterion-glob:
    title: criterion-glob
    type: object
    properties:
      glob:
        type: array
        minItems: 2
        maxItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - glob
    x-examples:
      example-1:
        glob:
          - column: filename
          - '*.txt'
    description: 'CRITERION-GLOB is a criterion which represents a "glob" comparison operation.'
    x-tags:
      - criteria
  criterion-gt:
    title: criterion-gt
    type: object
    properties:
      gt:
        type: array
        minItems: 2
        maxItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - gt
    x-examples:
      example-1:
        gt:
          - column: total
          - 1.23
    description: 'CRITERION-GT is a criterion which represents a "greater than" comparison operation.'
    x-tags:
      - criteria
  criterion-gte:
    title: criterion-gte
    type: object
    properties:
      gte:
        type: array
        minItems: 2
        maxItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - gte
    x-examples:
      example-1:
        gte:
          - column: total
          - 1.23
    description: 'CRITERION-GTE is a criterion which represents a "greater than or equal to" comparison operation.'
    x-tags:
      - criteria
  criterion-like:
    title: criterion-like
    type: object
    properties:
      like:
        type: array
        minItems: 2
        maxItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - like
    x-examples:
      example-1:
        like:
          - column: email
          - '%@example.com'
    description: 'CRITERION-LIKE is a criterion which represents a "like" comparison operation.'
    x-tags:
      - criteria
  criterion-lte:
    title: criterion-lte
    type: object
    properties:
      lte:
        type: array
        minItems: 2
        maxItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - lte
    x-examples:
      example-1:
        lte:
          - column: total
          - 1.23
    description: 'CRITERION-LTE is a criterion which represents a "less than or equal to" comparison operation.'
    x-tags:
      - criteria
  criterion-lt:
    title: criterion-lt
    type: object
    properties:
      lt:
        type: array
        minItems: 2
        maxItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - lt
    x-examples:
      example-1:
        lt:
          - column: total
          - 1.23
    description: 'CRITERION-LT is a criterion which represents a "less than" comparison operation.'
    x-tags:
      - criteria
  criterion-ne:
    title: criterion-ne
    type: object
    properties:
      ne:
        type: array
        minItems: 2
        maxItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - ne
    x-examples:
      example-1:
        ne:
          - column: status
          - unknown
    description: 'CRITERION-NE is a criterion which represents a "not equal" comparison operation.'
    x-tags:
      - criteria
  criterion-regexp:
    title: criterion-regexp
    type: object
    properties:
      regexp:
        type: array
        minItems: 2
        maxItems: 2
        items:
          $ref: '#/definitions/expression'
    required:
      - regexp
    x-examples:
      example-1:
        regexp:
          - column: username
          - ^admin$
    description: 'CRITERION-REGEXP is a criterion which represents a "regexp" comparison operation.'
    x-tags:
      - criteria
  select:
    type: object
    title: select
    x-examples:
      example-1:
        select:
          from:
            table: users
          columns:
            - column: '*'
      example-2:
        select:
          from:
            table: users
          columns:
            - column: id
            - column: login
      example-3:
        select:
          from:
            table: users
          columns:
            - column: '*'
          where:
            - not-null:
                column: verified
      example-4:
        select:
          from:
            table: users
            alias: u
          columns:
            - column: '*'
          joins:
            - with:
                table: profiles
                alias: p
              having:
                - eq:
                  - column: id
                    alias: p
                  - column: profile_id
                    alias: u
      example-5:
        select:
          from:
            table: users
          columns:
            - func:
                - count
                - column: id
            - column: country
          group-by:
            - column: country
      example-6:
        select:
          from:
            table: users
          columns:
            - func:
                - count
                - column: id
            - column: country
          group-by:
            - column: country
          having:
            - gt:
                - func:
                    - count
                    - column: id
                - 5
      example-7:
        select:
          from:
            table: users
          columns:
            - column: '*'
          order-by:
            - column: id
              sort: desc
      example-8:
        select:
          from:
            table: users
          columns:
            - column: '*'
          order-by:
            - column: id
              sort: desc
            - column: login
              sort: asc
      example-9:
        select:
          from:
            table: users
          columns:
            - column: '*'
          rows:
            limit: 10
      example-10:
        select:
          from:
            table: users
          columns:
            - column: '*'
          rows:
            limit: 10
            offset: 10
    properties:
      select:
        type: object
        required:
          - from
          - columns
        properties:
          from:
            $ref: '#/definitions/table'
          columns:
            type: array
            items:
              $ref: '#/definitions/expression'
          where:
            type: array
            items:
              $ref: '#/definitions/criteria'
          joins:
            type: array
            items:
              type: object
              properties:
                with:
                  $ref: '#/definitions/table'
                having:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/definitions/criteria'
              required:
                - with
                - having
          group-by:
            type: array
            items:
              $ref: '#/definitions/expression'
          having:
            type: array
            items:
              $ref: '#/definitions/criteria'
          order-by:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/column'
                - type: object
                  properties:
                    sort:
                      type: string
                      enum:
                        - asc
                        - ascending
                        - desc
                        - descending
          rows:
            type: object
            properties:
              limit:
                type: number
              offset:
                type: number
            required:
              - limit
    required:
      - select
    description: SELECT retrieves rows from zero or more tables.
    x-tags:
      - query
  insert:
    title: insert
    type: object
    description: INSERT inserts new rows into a table.
    x-examples:
      example-1:
        insert:
          into:
            table: users
          values:
            - value: 1
            - value: root
            - value: secret
      example-2:
        insert:
          into:
            table: users
          columns:
            - column: id
            - column: login
            - column: password
          values:
            - value: 1
            - value: root
            - value: secret
      example-3:
        insert:
          into:
            table: users
          default: true
      example-4:
        insert:
          into:
            table: users
          query:
            select:
              from:
                table: users
              columns:
                - column: '*'
      example-5:
        insert:
          into:
            table: users
          columns:
            - column: login
            - column: password
          query:
            select:
              from:
                table: applicants
              columns:
                - column: username
                - column: password
              where:
                - not-null:
                    column: verified
    properties:
      insert:
        type: object
        required:
          - into
        properties:
          into:
            $ref: '#/definitions/table'
          columns:
            type: array
            items:
              $ref: '#/definitions/column'
          values:
            type: array
            items:
              type: object
              properties:
                value:
                  $ref: '#/definitions/expression'
              required:
                - value
          query:
            $ref: '#/definitions/select'
          default:
            type: boolean
    required:
      - insert
    x-tags:
      - query
  table:
    title: table
    type: object
    description: TABLE represents a DATABASE table reference.
    properties:
      table:
        type: string
        maxLength: 255
      schema:
        type: string
        maxLength: 255
      alias:
        type: string
        maxLength: 255
    required:
      - table
    x-examples:
      example-1:
        table: users
      example-2:
        table: users
        alias: u
    x-tags:
      - reference
  update:
    title: update
    type: object
    x-examples:
      example-1:
        update:
          for:
            table: users
          columns:
            - column: login
              value: admin
          where:
            - not-null:
                column: verified
      example-2:
        update:
          for:
            table: users
          columns:
            - column: login
              value: admin
            - column: password
              value: secret
          where:
            - eq:
                - column: id
                - 1
    properties:
      update:
        type: object
        required:
          - for
          - columns
        properties:
          for:
            $ref: '#/definitions/table'
          columns:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/column'
                - type: object
                  properties:
                    value:
                      $ref: '#/definitions/expression'
                  required:
                    - value
          where:
            type: array
            items:
              $ref: '#/definitions/criteria'
    required:
      - update
    description: UPDATE changes the values of the specified columns in all rows that satisfy the condition.
    x-tags:
      - query
  delete:
    title: delete
    type: object
    properties:
      delete:
        type: object
        required:
          - from
        properties:
          from:
            $ref: '#/definitions/table'
          where:
            type: array
            items:
              $ref: '#/definitions/criteria'
    required:
      - delete
    x-examples:
      example-1:
        delete:
          from:
            table: users
      example-2:
        delete:
          from:
            table: users
          where:
            - eq:
                - column: id
                - 123
    description: DELETE deletes existing rows from the table.
    x-tags:
      - query
  database-create:
    title: database-create
    type: object
    x-examples:
      example-1:
        database-create:
          name: users
      example-2:
        database-create:
          name: users
          safe: true
    properties:
      database-create:
        type: object
        required:
          - name
        properties:
          name:
            type: string
            maxLength: 255
          safe:
            type: boolean
    required:
      - database-create
    description: DATABASE-CREATE creates a new database.
    x-tags:
      - query
  database-drop:
    title: database-drop
    type: object
    properties:
      database-drop:
        type: object
        required:
          - name
        properties:
          name:
            type: string
            maxLength: 255
          safe:
            type: boolean
    required:
      - database-drop
    x-examples:
      example-1:
        database-drop:
          name: users
      example-2:
        database-drop:
          name: users
          safe: true
    description: DATABASE-DROP removes an existing database.
    x-tags:
      - query
  schema-create:
    title: schema-create
    type: object
    x-examples:
      example-1:
        schema-create:
          name: private
      example-2:
        schema-create:
          name: private
          safe: true
    properties:
      schema-create:
        type: object
        required:
          - name
        properties:
          name:
            type: string
            maxLength: 255
          safe:
            type: boolean
    required:
      - schema-create
    description: SCHEMA-CREATE enters a new schema into the current database.
    x-tags:
      - query
  schema-drop:
    title: schema-drop
    type: object
    x-examples:
      example-1:
        schema-drop:
          name: private
      example-2:
        schema-drop:
          name: private
          safe: true
    properties:
      schema-drop:
        type: object
        required:
          - name
        properties:
          name:
            type: string
            maxLength: 255
          safe:
            type: boolean
    required:
      - schema-drop
    description: SCHEMA-DROP removes an existing schema from the current database.
    x-tags:
      - query
  schema-rename:
    title: schema-rename
    type: object
    x-examples:
      example-1:
        schema-rename:
          name:
            old: private
            new: internal
    properties:
      schema-rename:
        type: object
        required:
          - name
        properties:
          name:
            type: object
            required:
              - new
              - old
            properties:
              new:
                type: string
                maxLength: 255
              old:
                type: string
                maxLength: 255
    required:
      - schema-rename
    description: SCHEMA-RENAME renames an existing schema definition.
    x-tags:
      - query
  table-create:
    title: table-create
    type: object
    description: 'TABLE-CREATE will create a new, initially empty table in the current database.'
    properties:
      table-create:
        type: object
        required:
          - name
        properties:
          name:
            type: string
            maxLength: 255
          temp:
            type: boolean
          safe:
            type: boolean
          columns:
            type: array
            minItems: 1
            items:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                type:
                  $ref: '#/definitions/type'
                default:
                  $ref: '#/definitions/literal'
                nullable:
                  type: boolean
                primary:
                  type: boolean
                sequence:
                  type: boolean
              required:
                - name
                - type
          query:
            $ref: '#/definitions/select'
    required:
      - table-create
    x-examples:
      example-1:
        table-create:
          name: users
          columns:
            - name: id
              type: integer
              primary: true
              sequence: true
      example-2:
        table-create:
          name: removed_users
          temp: true
          safe: true
          columns:
            - name: id
              type: integer
              primary: true
              sequence: true
      example-3:
        table-create:
          name: removed_users
          temp: true
          safe: true
          query:
            select:
              from:
                table: users
              columns:
                - column: id
                - column: login
    x-tags:
      - query
  type:
    type: string
    title: type
    enum:
      - binary
      - boolean
      - char
      - date
      - datetime
      - datetime-wtz
      - decimal
      - double
      - enum
      - float
      - integer
      - integer-big
      - integer-big-unsigned
      - integer-medium
      - integer-medium-unsigned
      - integer-small
      - integer-small-unsigned
      - integer-tiny
      - integer-tiny-unsigned
      - integer-unsigned
      - json
      - number
      - string
      - text
      - text-long
      - text-medium
      - time
      - time-wtz
      - timestamp
      - timestamp-wtz
    default: string
    maxLength: 255
    x-examples:
      example-1: string
      example-2: number
      example-3: integer
      example-4: integer-big
    description: TYPE represents an acceptable SQL data type string.
    x-tags:
      - reference
  table-drop:
    title: table-drop
    type: object
    properties:
      table-drop:
        type: object
        required:
          - name
        properties:
          name:
            type: string
            maxLength: 255
          safe:
            type: boolean
          condition:
            type: string
            enum:
              - cascade
              - restrict
            maxLength: 255
    required:
      - table-drop
    x-examples:
      example-1:
        table-drop:
          name: users
      example-2:
        table-drop:
          name: users
          safe: true
      example-3:
        table-drop:
          name: users
          safe: true
          condition: cascade
    description: TABLE-DROP removes tables from the database.
    x-tags:
      - query
  table-rename:
    title: table-rename
    type: object
    x-examples:
      example-1:
        table-rename:
          name:
            old: users
            new: staff
    properties:
      table-rename:
        type: object
        required:
          - name
        properties:
          name:
            type: object
            required:
              - new
              - old
            properties:
              new:
                type: string
                maxLength: 255
              old:
                type: string
                maxLength: 255
    required:
      - table-rename
    description: TABLE-RENAME changes the definition of an existing table.
    x-tags:
      - query
  view-create:
    title: view-create
    type: object
    properties:
      view-create:
        type: object
        required:
          - name
          - query
        properties:
          name:
            type: string
            maxLength: 255
          temp:
            type: boolean
          safe:
            type: boolean
          columns:
            type: array
            items:
              type: object
              properties:
                column:
                  type: string
                  maxLength: 255
              required:
                - column
          query:
            $ref: '#/definitions/select'
    required:
      - view-create
    x-examples:
      example-1:
        view-create:
          name: active_users
          query:
            select:
              from:
                table: users
              columns:
                - column: '*'
              where:
                - not-null:
                    column: active
      example-2:
        view-create:
          name: active_users
          temp: true
          safe: true
          query:
            select:
              from:
                table: users
              columns:
                - column: '*'
              where:
                - not-null:
                    column: active
    description: VIEW-CREATE defines a view of a query.
    x-tags:
      - query
  view-drop:
    title: view-drop
    type: object
    properties:
      view-drop:
        type: object
        required:
          - name
        properties:
          name:
            type: string
            maxLength: 255
          safe:
            type: boolean
    required:
      - view-drop
    x-examples:
      example-1:
        view-drop:
          name: active_users
      example-2:
        view-drop:
          name: active_users
          safe: true
    description: VIEW-DROP drops an existing view.
    x-tags:
      - query
  column-rename:
    title: column-rename
    type: object
    x-examples:
      example-1:
        column-rename:
          for:
            table: users
          name:
            old: email
            new: email_address
      example-2:
        column-rename:
          for:
            table: users
          name:
            old: created
            new: created_at
      example-3:
        column-rename:
          for:
            table: users
          name:
            old: updated
            new: updated_at
    properties:
      column-rename:
        type: object
        required:
          - name
          - for
        properties:
          name:
            type: object
            required:
              - new
              - old
            properties:
              new:
                type: string
                maxLength: 255
              old:
                type: string
                maxLength: 255
          for:
            $ref: '#/definitions/table'
    required:
      - column-rename
    description: COLUMN-RENAME changes the definition of an existing table by renaming a new column.
    x-tags:
      - query
  column-create:
    title: column-create
    type: object
    description: COLUMN-CREATE changes the definition of an existing table by adding a new column.
    x-examples:
      example-1:
        column-create:
          for:
            table: users
          column:
            name: email
            type: string
      example-2:
        column-create:
          for:
            table: users
          column:
            name: verified
            type: date
            nullable: true
      example-3:
        column-create:
          for:
            table: users
          column:
            name: id
            type: integer
            nullable: false
            primary: true
            sequence: true
    properties:
      column-create:
        type: object
        required:
          - for
          - column
        properties:
          for:
            $ref: '#/definitions/table'
          column:
            type: object
            required:
              - name
              - type
            properties:
              name:
                type: string
                maxLength: 255
              type:
                $ref: '#/definitions/type'
              default:
                $ref: '#/definitions/literal'
              nullable:
                type: boolean
              primary:
                type: boolean
              sequence:
                type: boolean
    required:
      - column-create
    x-tags:
      - query
  criterion-and:
    title: criterion-and
    type: object
    x-examples:
      example-1:
        and:
          - eq:
              - column: role
              - guest
          - not-null:
              column: verified
    properties:
      and:
        type: array
        items:
          $ref: '#/definitions/criteria'
    required:
      - and
    description: 'CRITERION-AND is a criterion which represents a condition which joins the CRITERIA provided using the "AND" operator.'
    x-tags:
      - criteria
  criterion-or:
    title: criterion-or
    type: object
    x-examples:
      example-1:
        or:
          - eq:
              - column: role
              - guest
          - eq:
              - column: role
              - user
    properties:
      or:
        type: array
        items:
          $ref: '#/definitions/criteria'
    required:
      - or
    description: 'CRITERION-OR is a condition which joins the CRITERIA provided using the "OR" operator.'
    x-tags:
      - criteria
  query:
    title: query
    oneOf:
      - $ref: '#/definitions/select'
      - $ref: '#/definitions/insert'
      - $ref: '#/definitions/update'
      - $ref: '#/definitions/delete'
      - $ref: '#/definitions/column-create'
      - $ref: '#/definitions/column-rename'
      - $ref: '#/definitions/database-create'
      - $ref: '#/definitions/database-drop'
      - $ref: '#/definitions/schema-create'
      - $ref: '#/definitions/schema-drop'
      - $ref: '#/definitions/schema-rename'
      - $ref: '#/definitions/table-create'
      - $ref: '#/definitions/table-drop'
      - $ref: '#/definitions/table-rename'
      - $ref: '#/definitions/view-create'
      - $ref: '#/definitions/view-drop'
    description: QUERY represents a valid SQL statement.
    x-tags:
      - query
  constraint-create:
    title: constraint-create
    type: object
    properties:
      constraint-create:
        type: object
        required:
          - source
          - target
        properties:
          name:
            type: string
            maxLength: 255
          source:
            allOf:
              - $ref: '#/definitions/table'
              - $ref: '#/definitions/column'
          target:
            allOf:
              - $ref: '#/definitions/table'
              - $ref: '#/definitions/column'
    required:
      - constraint-create
    x-examples:
      example-1:
        constraint-create:
          source:
            table: users
            column: profile_id
          target:
            table: profiles
            column: id
      example-2:
        constraint-create:
          name: fkey_users_profile_id
          source:
            table: users
            column: profile_id
          target:
            table: profiles
            column: id
    x-tags:
      - query
    description: CONSTRAINT-CREATE changes the definition of an existing table by adding a new foreign-key constraint.
  constraint-drop:
    title: constraint-drop
    type: object
    properties:
      constraint-drop:
        anyOf:
          - type: object
            properties:
              name:
                type: string
                maxLength: 255
            required:
              - name
          - type: object
            required:
              - source
              - target
            properties:
              source:
                allOf:
                  - $ref: '#/definitions/table'
                  - $ref: '#/definitions/column'
              target:
                allOf:
                  - $ref: '#/definitions/table'
                  - $ref: '#/definitions/column'
    required:
      - constraint-drop
    x-examples:
      example-1:
        constraint-drop:
          source:
            table: users
            column: profile_id
          target:
            table: profiles
            column: id
      example-2:
        constraint-drop:
          name: fkey_users_profile_id
          source:
            table: users
            column: profile_id
          target:
            table: profiles
            column: id
      example-3:
        constraint-drop:
          name: fkey_users_profile_id
    x-tags:
      - query
    description: CONSTRAINT-DROP removes an existing foreign-key constraint.
  index-create:
    title: index-create
    type: object
    x-examples:
      example-1:
        index-create:
          table: users
          column: email
      example-2:
        index-create:
          name: indx_users_email
          table: users
          column: email
      example-3:
        index-create:
          name: indx_uni_users_email
          table: users
          column: email
          unique: true
    properties:
      index-create:
        allOf:
          - type: object
            properties:
              name:
                type: string
                maxLength: 255
              unique:
                type: boolean
          - $ref: '#/definitions/table'
          - $ref: '#/definitions/column'
    required:
      - index-create
    x-tags:
      - query
    description: INDEX-CREATE changes the definition of an existing table by adding a new column index.
  index-drop:
    title: index-drop
    type: object
    x-examples:
      example-1:
        index-drop:
          table: users
          column: email
      example-2:
        index-drop:
          name: indx_users_email
          table: users
          column: email
      example-3:
        index-drop:
          name: indx_users_email
    properties:
      index-drop:
        anyOf:
          - type: object
            properties:
              name:
                type: string
                maxLength: 255
            required:
              - name
          - allOf:
            - type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                unique:
                  type: boolean
            - $ref: '#/definitions/table'
            - $ref: '#/definitions/column'
    required:
      - index-drop
    x-tags:
      - query
    description: INDEX-DROP removes an existing new column index.
  transaction:
    title: transaction
    type: object
    x-examples:
      example-1:
        transaction:
          queries:
            - table-create:
                name: users
                columns:
                  - name: id
                    type: integer
                    primary: true
            - table-create:
                name: profiles
                columns:
                  - name: id
                    type: integer
                    primary: true
      example-2:
        transaction:
          mode:
            - deferrable
          queries:
            - table-create:
                name: users
                columns:
                  - name: id
                    type: integer
                    primary: true
            - table-create:
                name: profiles
                columns:
                  - name: id
                    type: integer
                    primary: true
    properties:
      transaction:
        type: object
        required:
          - queries
        properties:
          mode:
            type: array
            items:
              type: string
              maxLength: 255
          queries:
            type: array
            items:
              $ref: '#/definitions/query'
    required:
      - transaction
    x-tags:
      - query
    description: TRANSACTION represents a set of valid SQL statements to be executed within a database transaction.
