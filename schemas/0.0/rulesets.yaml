---
$id: https://raw.githubusercontent.com/iamalnewkirk/json-sql/master/rulesets.yaml
$schema: https://json-schema.org/draft/2019-09/schema
definitions:
  as:
    description: 'AS is an EXPRESSION which declares an alias for another EXPRESSION, typically in a column SELECT definition.'
    properties:
      as:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - as
    title: as
    type: object
    x-examples:
      example-1:
        as:
          - active
          - 1
      example-2:
        as:
          - inactive
          - 0
      example-3:
        as:
          - ssn
          - column: social_security_number
    x-tags:
      - expression
  binary:
    description: BINARY is an EXPRESSION which uses the first and second EXPRESSION to perform a binary operation.
    properties:
      binary:
        oneOf:
          - properties:
              plus:
                items:
                  $ref: '#/definitions/expression'
                maxItems: 2
                minItems: 2
                type: array
            required:
              - plus
          - properties:
              minus:
                items:
                  $ref: '#/definitions/expression'
                maxItems: 2
                minItems: 2
                type: array
            required:
              - minus
          - properties:
              multiply:
                items:
                  $ref: '#/definitions/expression'
                maxItems: 2
                minItems: 2
                type: array
            required:
              - multiply
          - properties:
              divide:
                items:
                  $ref: '#/definitions/expression'
                maxItems: 2
                minItems: 2
                type: array
            required:
              - divide
          - properties:
              modulo:
                items:
                  $ref: '#/definitions/expression'
                maxItems: 2
                minItems: 2
                type: array
            required:
              - modulo
        type: object
    required:
      - binary
    title: binary
    type: object
    x-examples:
      example-1:
        binary:
          plus:
            - 123
            - 1
      example-2:
        binary:
          minus:
            - 123
            - 1
      example-3:
        binary:
          plus:
            - column: count
            - 1
      example-4:
        binary:
          minus:
            - column: count
            - 1
      example-5:
        binary:
          multiply:
            - 25
            - 25
      example-6:
        binary:
          divide:
            - 100
            - 5
      example-7:
        binary:
          modulo:
            - 29
            - 9
    x-tags:
      - expression
  binding:
    description: BINDING is an EXPRESSION which represents is a named-placeholder to be substituted later.
    properties:
      bind:
        maxLength: 255
        type: string
    required:
      - bind
    title: binding
    type: object
    x-examples:
      example-1:
        bind: token
      example-2:
        bind: uuid
    x-tags:
      - expression
  case:
    description: CASE is an EXPRESSION which provides a mechanism for declaring conditional expressions.
    properties:
      case:
        properties:
          else:
            $ref: '#/definitions/expression'
          when:
            items:
              properties:
                cond:
                  oneOf:
                    - $ref: '#/definitions/criteria'
                    - $ref: '#/definitions/expression'
                then:
                  $ref: '#/definitions/expression'
              type: object
            minItems: 1
            type: array
        required:
          - when
          - else
        type: object
    required:
      - case
    title: case
    type: object
    x-examples:
      example-1:
        case:
          else: user
          when:
            - cond:
                eq:
                  - admin
                  - admin
              then: admin
      example-2:
        case:
          else: 0
          when:
            - cond:
                eq:
                  - column: role
                  - admin
              then: 1
      example-3:
        case:
          else: 0
          when:
            - cond:
                eq:
                  - column: role
                  - admin
              then: 1
            - cond:
                eq:
                  - column: role
                  - manager
              then: 2
    x-tags:
      - expression
  cast:
    description: CAST is an EXPRESSION which specifies a conversion from one data type to another.
    properties:
      cast:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - cast
    title: cast
    type: object
    x-examples:
      example-1:
        cast:
          - 12.34
          - int
      example-2:
        cast:
          - 2020-01-01
          - datetime
      example-3:
        cast:
          - func:
              - date
              - now
          - varchar
    x-tags:
      - expression
  column:
    description: COLUMN represents TABLE column reference.
    properties:
      alias:
        maxLength: 255
        type: string
      column:
        maxLength: 255
        type: string
    required:
      - column
    title: column
    type: object
    x-examples:
      example-1:
        column: id
      example-2:
        column: created
    x-tags:
      - reference
  column-change:
    description: COLUMN-CHANGE changes the definition of an existing table and column.
    properties:
      column-change:
        properties:
          column:
            $ref: '#/definitions/column-definition'
          for:
            $ref: '#/definitions/table'
        required:
          - for
          - column
        type: object
    required:
      - column-change
    title: column-change
    type: object
    x-examples:
      example-1:
        column-change:
          column:
            name: login_attempts
            nullable: false
            type: integer-big
          for:
            table: users
      example-2:
        column-change:
          column:
            default:
              verbatim:
                - CURRENT_TIMESTAMP
            name: last_login_at
            type: timestamp
          for:
            table: users
  column-create:
    description: COLUMN-CREATE changes the definition of an existing table by adding a new column.
    properties:
      column-create:
        properties:
          column:
            $ref: '#/definitions/column-definition'
          for:
            $ref: '#/definitions/table'
          safe:
            type: boolean
        required:
          - column
          - for
        type: object
    required:
      - column-create
    title: column-create
    type: object
    x-examples:
      example-1:
        column-create:
          column:
            name: email
            type: string
          for:
            table: users
      example-2:
        column-create:
          column:
            name: verified
            nullable: true
            type: date
          for:
            table: users
      example-3:
        column-create:
          column:
            increment: true
            name: id
            nullable: false
            primary: true
            type: integer
          for:
            table: users
    x-tags:
      - query
  column-definition:
    description: COLUMN-DEFINITION represents a table column definition.
    properties:
      default:
        oneOf:
          - $ref: '#/definitions/literal'
          - $ref: '#/definitions/function'
          - $ref: '#/definitions/verbatim'
      increment:
        type: boolean
      name:
        maxLength: 255
        type: string
      nullable:
        type: boolean
      options:
        items:
          $ref: '#/definitions/literal'
        type: array
      primary:
        type: boolean
      type:
        $ref: '#/definitions/type'
    required:
      - name
      - type
    title: column-definition
    type: object
    x-examples:
      example-1:
        name: id
        type: number
      example-2:
        increment: true
        name: id
        primary: true
        type: integer
      example-3:
        name: fullname
        nullable: false
        type: string
      example-4:
        default: guest
        name: role
        type: string
      example-5:
        default: dark
        name: theme
        options:
          - light
          - dark
        type: enum
    x-tags:
      - reference
  column-drop:
    description: COLUMN-DROP removes an existing column from an existing table.
    properties:
      column-drop:
        allOf:
          - $ref: '#/definitions/table'
          - $ref: '#/definitions/column'
          - properties:
              safe:
                type: boolean
            type: object
    required:
      - column-drop
    title: column-drop
    type: object
    x-examples:
      example-1:
        column-drop:
          column: phone
          table: users
  column-rename:
    description: COLUMN-RENAME changes the definition of an existing table by renaming a new column.
    properties:
      column-rename:
        properties:
          for:
            $ref: '#/definitions/table'
          name:
            properties:
              new:
                maxLength: 255
                type: string
              old:
                maxLength: 255
                type: string
            required:
              - new
              - old
            type: object
          safe:
            type: boolean
        required:
          - name
          - for
        type: object
    required:
      - column-rename
    title: column-rename
    type: object
    x-examples:
      example-1:
        column-rename:
          for:
            table: users
          name:
            new: email_address
            old: email
      example-2:
        column-rename:
          for:
            table: users
          name:
            new: created_at
            old: created
      example-3:
        column-rename:
          for:
            table: users
          name:
            new: updated_at
            old: updated
      example-4:
        column-rename:
          for:
            table: users
          name:
            new: updated_at
            old: updated
          safe: true
    x-tags:
      - query
  constraint-create:
    description: CONSTRAINT-CREATE changes the definition of an existing table by adding a new foreign-key constraint.
    properties:
      constraint-create:
        properties:
          name:
            maxLength: 255
            type: string
          safe:
            type: boolean
          source:
            allOf:
              - $ref: '#/definitions/table'
              - $ref: '#/definitions/column'
          target:
            allOf:
              - $ref: '#/definitions/table'
              - $ref: '#/definitions/column'
        required:
          - source
          - target
        type: object
    required:
      - constraint-create
    title: constraint-create
    type: object
    x-examples:
      example-1:
        constraint-create:
          source:
            column: profile_id
            table: users
          target:
            column: id
            table: profiles
      example-2:
        constraint-create:
          name: fkey_users_profile_id
          source:
            column: profile_id
            table: users
          target:
            column: id
            table: profiles
    x-tags:
      - query
  constraint-drop:
    description: CONSTRAINT-DROP removes an existing foreign-key constraint.
    properties:
      constraint-drop:
        anyOf:
          - properties:
              name:
                maxLength: 255
                type: string
            required:
              - name
            safe:
              type: boolean
            type: object
          - properties:
              safe:
                type: boolean
              source:
                allOf:
                  - $ref: '#/definitions/table'
                  - $ref: '#/definitions/column'
              target:
                allOf:
                  - $ref: '#/definitions/table'
                  - $ref: '#/definitions/column'
            required:
              - source
              - target
            type: object
    required:
      - constraint-drop
    title: constraint-drop
    type: object
    x-examples:
      example-1:
        constraint-drop:
          source:
            column: profile_id
            table: users
          target:
            column: id
            table: profiles
      example-2:
        constraint-drop:
          name: fkey_users_profile_id
          source:
            column: profile_id
            table: users
          target:
            column: id
            table: profiles
      example-3:
        constraint-drop:
          name: fkey_users_profile_id
    x-tags:
      - query
  criteria:
    description: CRITERIA is a set of rules (criterion) which can be combined to create conditions and clauses which filter SQL datasets.
    oneOf:
      - $ref: '#/definitions/criterion-in'
      - $ref: '#/definitions/criterion-is-null'
      - $ref: '#/definitions/criterion-not-null'
      - $ref: '#/definitions/criterion-eq'
      - $ref: '#/definitions/criterion-glob'
      - $ref: '#/definitions/criterion-gt'
      - $ref: '#/definitions/criterion-gte'
      - $ref: '#/definitions/criterion-like'
      - $ref: '#/definitions/criterion-lte'
      - $ref: '#/definitions/criterion-lt'
      - $ref: '#/definitions/criterion-ne'
      - $ref: '#/definitions/criterion-regexp'
      - $ref: '#/definitions/criterion-and'
      - $ref: '#/definitions/criterion-or'
    title: criteria
    x-examples:
      example-1:
        in:
          - column: theme
          - light
          - dark
      example-10:
        lt:
          - column: total
          - 1.23
      example-11:
        ne:
          - column: status
          - unknown
      example-12:
        regexp:
          - column: username
          - '^admin$'
      example-13:
        and:
          - eq:
              - column: role
              - guest
          - not-null:
              column: verified
      example-14:
        or:
          - eq:
              - column: role
              - guest
          - eq:
              - column: role
              - user
      example-2:
        is-null:
          column: deleted
      example-3:
        not-null:
          column: deleted
      example-4:
        eq:
          - column: role
          - admin
      example-5:
        glob:
          - column: filename
          - '*.txt'
      example-6:
        gt:
          - column: total
          - 1.23
      example-7:
        gte:
          - column: total
          - 1.23
      example-8:
        like:
          - column: email
          - '%@example.com'
      example-9:
        lte:
          - column: total
          - 1.23
    x-tags:
      - criteria
  criterion-and:
    description: CRITERION-AND is a criterion which represents a condition which joins the CRITERIA provided using the "AND" operator.
    properties:
      and:
        items:
          $ref: '#/definitions/criteria'
        type: array
    required:
      - and
    title: criterion-and
    type: object
    x-examples:
      example-1:
        and:
          - eq:
              - column: role
              - guest
          - not-null:
              column: verified
    x-tags:
      - criteria
  criterion-between:
    description: CRITERION-BETWEEN is a criterion which requires the first EXPRESSION to exist within the range that exists between the second and third EXPRESSION.
    properties:
      between:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - between
    title: criterion-between
    type: object
    x-examples:
      example-1:
        between:
          - column: created
          - column: updated
      example-2:
        between:
          - column: created
          - func:
              - date
              - now
      example-3:
        between:
          - column: created
          - func:
              - date
              - now
      example-4:
        between:
          - func:
              - datetime
              - 1092941466
              - unixepoch
          - func:
              - date
              - now
    x-tags:
      - criteria
  criterion-eq:
    description: CRITERION-EQ is a criterion which represents an "equal" comparison operation.
    properties:
      eq:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - eq
    title: criterion-eq
    type: object
    x-examples:
      example-1:
        eq:
          - column: role
          - admin
    x-tags:
      - criteria
  criterion-glob:
    description: CRITERION-GLOB is a criterion which represents a "glob" comparison operation.
    properties:
      glob:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - glob
    title: criterion-glob
    type: object
    x-examples:
      example-1:
        glob:
          - column: filename
          - '*.txt'
    x-tags:
      - criteria
  criterion-gt:
    description: CRITERION-GT is a criterion which represents a "greater than" comparison operation.
    properties:
      gt:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - gt
    title: criterion-gt
    type: object
    x-examples:
      example-1:
        gt:
          - column: total
          - 1.23
    x-tags:
      - criteria
  criterion-gte:
    description: CRITERION-GTE is a criterion which represents a "greater than or equal to" comparison operation.
    properties:
      gte:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - gte
    title: criterion-gte
    type: object
    x-examples:
      example-1:
        gte:
          - column: total
          - 1.23
    x-tags:
      - criteria
  criterion-in:
    description: CRITERION-IN is a criterion which represents an "is included in the set" comparison operation.
    properties:
      in:
        items:
          $ref: '#/definitions/expression'
        minItems: 2
        type: array
    required:
      - in
    title: criterion-in
    type: object
    x-examples:
      example-1:
        in:
          - column: theme
          - light
          - dark
    x-tags:
      - criteria
  criterion-is-null:
    description: CRITERION-IS-NULL is a criterion which represents an "is null" comparison operation.
    properties:
      is-null:
        $ref: '#/definitions/expression'
    required:
      - is-null
    title: criterion-is-null
    type: object
    x-examples:
      example-1:
        is-null:
          column: deleted
    x-tags:
      - criteria
  criterion-like:
    description: CRITERION-LIKE is a criterion which represents a "like" comparison operation.
    properties:
      like:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - like
    title: criterion-like
    type: object
    x-examples:
      example-1:
        like:
          - column: email
          - '%@example.com'
    x-tags:
      - criteria
  criterion-lt:
    description: CRITERION-LT is a criterion which represents a "less than" comparison operation.
    properties:
      lt:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - lt
    title: criterion-lt
    type: object
    x-examples:
      example-1:
        lt:
          - column: total
          - 1.23
    x-tags:
      - criteria
  criterion-lte:
    description: CRITERION-LTE is a criterion which represents a "less than or equal to" comparison operation.
    properties:
      lte:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - lte
    title: criterion-lte
    type: object
    x-examples:
      example-1:
        lte:
          - column: total
          - 1.23
    x-tags:
      - criteria
  criterion-ne:
    description: CRITERION-NE is a criterion which represents a "not equal" comparison operation.
    properties:
      ne:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - ne
    title: criterion-ne
    type: object
    x-examples:
      example-1:
        ne:
          - column: status
          - unknown
    x-tags:
      - criteria
  criterion-not-null:
    description: CRITERION-NOT-NULL is a criterion which represents an "is not null" comparison operation.
    properties:
      not-null:
        $ref: '#/definitions/expression'
    required:
      - not-null
    title: criterion-not-null
    type: object
    x-examples:
      example-1:
        not-null:
          column: deleted
    x-tags:
      - criteria
  criterion-or:
    description: CRITERION-OR is a condition which joins the CRITERIA provided using the "OR" operator.
    properties:
      or:
        items:
          $ref: '#/definitions/criteria'
        type: array
    required:
      - or
    title: criterion-or
    type: object
    x-examples:
      example-1:
        or:
          - eq:
              - column: role
              - guest
          - eq:
              - column: role
              - user
    x-tags:
      - criteria
  criterion-regexp:
    description: CRITERION-REGEXP is a criterion which represents a "regexp" comparison operation.
    properties:
      regexp:
        items:
          $ref: '#/definitions/expression'
        maxItems: 2
        minItems: 2
        type: array
    required:
      - regexp
    title: criterion-regexp
    type: object
    x-examples:
      example-1:
        regexp:
          - column: username
          - '^admin$'
    x-tags:
      - criteria
  database-create:
    description: DATABASE-CREATE creates a new database.
    properties:
      database-create:
        properties:
          name:
            maxLength: 255
            type: string
          safe:
            type: boolean
        required:
          - name
        type: object
    required:
      - database-create
    title: database-create
    type: object
    x-examples:
      example-1:
        database-create:
          name: users
      example-2:
        database-create:
          name: users
          safe: true
    x-tags:
      - query
  database-drop:
    description: DATABASE-DROP removes an existing database.
    properties:
      database-drop:
        properties:
          name:
            maxLength: 255
            type: string
          safe:
            type: boolean
        required:
          - name
        type: object
    required:
      - database-drop
    title: database-drop
    type: object
    x-examples:
      example-1:
        database-drop:
          name: users
      example-2:
        database-drop:
          name: users
          safe: true
    x-tags:
      - query
  delete:
    description: DELETE deletes existing rows from the table.
    properties:
      delete:
        properties:
          from:
            $ref: '#/definitions/table'
          where:
            items:
              $ref: '#/definitions/criteria'
            type: array
        required:
          - from
        type: object
    required:
      - delete
    title: delete
    type: object
    x-examples:
      example-1:
        delete:
          from:
            table: users
      example-2:
        delete:
          from:
            table: users
          where:
            - eq:
                - column: id
                - 123
    x-tags:
      - query
  expression:
    description: EXPRESSION represents a valid SQL expression.
    oneOf:
      - $ref: '#/definitions/literal'
      - $ref: '#/definitions/column'
      - $ref: '#/definitions/function'
      - $ref: '#/definitions/verbatim'
      - $ref: '#/definitions/binding'
      - $ref: '#/definitions/binary'
      - $ref: '#/definitions/unary'
      - $ref: '#/definitions/cast'
      - $ref: '#/definitions/case'
      - $ref: '#/definitions/as'
      - $ref: '#/definitions/subquery'
    title: expression
    x-examples:
      example-1: 123
      example-2:
        column: id
      example-3:
        func:
          - true
      example-4:
        func:
          - false
      example-5:
        bind: login
      example-6:
        binary:
          plus:
            - 1
            - 1
      example-7:
        unary:
          plus: 1
      example-8:
        cast:
          - 12.34
          - int
      example-9:
        case:
          else: 0
          when:
            - cond:
                eq:
                  - 1
                  - 1
              then: 1
    x-tags:
      - expression
  function:
    description: FUNCTION is an EXPRESSION which represents a built-in SQL function.
    properties:
      func:
        items:
          $ref: '#/definitions/expression'
        minItems: 1
        type: array
    required:
      - func
    title: function
    type: object
    x-examples:
      example-1:
        func:
          - true
      example-2:
        func:
          - false
      example-3:
        func:
          - date
          - now
    x-tags:
      - expression
  index-create:
    description: INDEX-CREATE changes the definition of an existing table by adding a new column index.
    properties:
      index-create:
        allOf:
          - properties:
              name:
                maxLength: 255
                type: string
              safe:
                type: boolean
              unique:
                type: boolean
            type: object
          - $ref: '#/definitions/table'
          - $ref: '#/definitions/column'
    required:
      - index-create
    title: index-create
    type: object
    x-examples:
      example-1:
        index-create:
          column: email
          table: users
      example-2:
        index-create:
          column: email
          name: indx_users_email
          table: users
      example-3:
        index-create:
          column: email
          name: indx_uni_users_email
          table: users
          unique: true
    x-tags:
      - query
  index-drop:
    description: INDEX-DROP removes an existing new column index.
    properties:
      index-drop:
        anyOf:
          - properties:
              name:
                maxLength: 255
                type: string
              safe:
                type: boolean
            required:
              - name
            type: object
          - allOf:
              - properties:
                  name:
                    maxLength: 255
                    type: string
                  safe:
                    type: boolean
                  unique:
                    type: boolean
                type: object
              - $ref: '#/definitions/table'
              - $ref: '#/definitions/column'
    required:
      - index-drop
    title: index-drop
    type: object
    x-examples:
      example-1:
        index-drop:
          column: email
          table: users
      example-2:
        index-drop:
          column: email
          name: indx_users_email
          table: users
      example-3:
        index-drop:
          name: indx_users_email
    x-tags:
      - query
  insert:
    description: INSERT inserts new rows into a table.
    properties:
      insert:
        properties:
          columns:
            items:
              $ref: '#/definitions/column'
            type: array
          default:
            type: boolean
          into:
            $ref: '#/definitions/table'
          query:
            $ref: '#/definitions/select'
          values:
            items:
              properties:
                value:
                  $ref: '#/definitions/expression'
              required:
                - value
              type: object
            type: array
        required:
          - into
        type: object
    required:
      - insert
    title: insert
    type: object
    x-examples:
      example-1:
        insert:
          into:
            table: users
          values:
            - value: 1
            - value: root
            - value: secret
      example-2:
        insert:
          columns:
            - column: id
            - column: login
            - column: password
          into:
            table: users
          values:
            - value: 1
            - value: root
            - value: secret
      example-3:
        insert:
          default: true
          into:
            table: users
      example-4:
        insert:
          into:
            table: users
          query:
            select:
              columns:
                - column: '*'
              from:
                table: users
      example-5:
        insert:
          columns:
            - column: login
            - column: password
          into:
            table: users
          query:
            select:
              columns:
                - column: username
                - column: password
              from:
                table: applicants
              where:
                - not-null:
                    column: verified
    x-tags:
      - query
  literal:
    description: LITERAL represents acceptable raw SQL data types.
    title: literal
    type:
      - string
      - number
      - integer
      - boolean
      - 'null'
    x-examples:
      example-1: secret
      example-2: 12345
      example-3: 1.2345
      example-4: -12345
      example-5: false
      example-6: true
      example-7: null
    x-tags:
      - expression
  query:
    description: QUERY represents a valid SQL statement.
    oneOf:
      - $ref: '#/definitions/select'
      - $ref: '#/definitions/insert'
      - $ref: '#/definitions/update'
      - $ref: '#/definitions/delete'
      - $ref: '#/definitions/column-change'
      - $ref: '#/definitions/column-create'
      - $ref: '#/definitions/column-drop'
      - $ref: '#/definitions/column-rename'
      - $ref: '#/definitions/constraint-create'
      - $ref: '#/definitions/constraint-drop'
      - $ref: '#/definitions/database-create'
      - $ref: '#/definitions/database-drop'
      - $ref: '#/definitions/index-create'
      - $ref: '#/definitions/index-drop'
      - $ref: '#/definitions/schema-create'
      - $ref: '#/definitions/schema-drop'
      - $ref: '#/definitions/schema-rename'
      - $ref: '#/definitions/table-create'
      - $ref: '#/definitions/table-drop'
      - $ref: '#/definitions/table-rename'
      - $ref: '#/definitions/transaction'
      - $ref: '#/definitions/view-create'
      - $ref: '#/definitions/view-drop'
    title: query
    x-examples:
      example-1:
        select:
          columns:
            - column: '*'
          from:
            table: users
      example-10:
        database-drop:
          name: users
      example-11:
        schema-create:
          name: private
      example-12:
        schema-drop:
          name: private
      example-13:
        schema-rename:
          name:
            new: internal
            old: private
      example-14:
        table-create:
          columns:
            - increment: true
              name: id
              primary: true
              type: integer
          name: users
      example-15:
        table-drop:
          name: users
      example-16:
        table-rename:
          name:
            new: staff
            old: users
      example-17:
        view-create:
          name: active_users
          query:
            select:
              columns:
                - column: '*'
              from:
                table: users
              where:
                - not-null:
                    column: active
      example-18:
        view-drop:
          name: active_users
      example-2:
        insert:
          into:
            table: users
          values:
            - value: 1
            - value: root
            - value: secret
      example-3:
        update:
          columns:
            - column: login
              value: admin
          for:
            table: users
          where:
            - not-null:
                column: verified
      example-4:
        delete:
          from:
            table: users
      example-5:
        column-create:
          column:
            name: email
            type: string
          for:
            table: users
      example-6:
        column-rename:
          for:
            table: users
          name:
            new: email_address
            old: email
      example-7:
        constraint-create:
          source:
            column: profile_id
            table: users
          target:
            column: id
            table: profiles
      example-8:
        constraint-drop:
          source:
            column: profile_id
            table: users
          target:
            column: id
            table: profiles
      example-9:
        database-create:
          name: users
    x-tags:
      - query
  schema-create:
    description: SCHEMA-CREATE enters a new schema into the current database.
    properties:
      schema-create:
        properties:
          name:
            maxLength: 255
            type: string
          safe:
            type: boolean
        required:
          - name
        type: object
    required:
      - schema-create
    title: schema-create
    type: object
    x-examples:
      example-1:
        schema-create:
          name: private
      example-2:
        schema-create:
          name: private
          safe: true
    x-tags:
      - query
  schema-drop:
    description: SCHEMA-DROP removes an existing schema from the current database.
    properties:
      schema-drop:
        properties:
          name:
            maxLength: 255
            type: string
          safe:
            type: boolean
        required:
          - name
        type: object
    required:
      - schema-drop
    title: schema-drop
    type: object
    x-examples:
      example-1:
        schema-drop:
          name: private
      example-2:
        schema-drop:
          name: private
          safe: true
    x-tags:
      - query
  schema-rename:
    description: SCHEMA-RENAME renames an existing schema definition.
    properties:
      schema-rename:
        properties:
          name:
            properties:
              new:
                maxLength: 255
                type: string
              old:
                maxLength: 255
                type: string
            required:
              - new
              - old
            type: object
        required:
          - name
        type: object
    required:
      - schema-rename
    title: schema-rename
    type: object
    x-examples:
      example-1:
        schema-rename:
          name:
            new: internal
            old: private
    x-tags:
      - query
  select:
    description: SELECT retrieves rows from zero or more tables.
    properties:
      select:
        properties:
          columns:
            items:
              $ref: '#/definitions/expression'
            type: array
          from:
            oneOf:
              - $ref: '#/definitions/table'
              - items:
                  $ref: '#/definitions/table'
                type: array
          group-by:
            items:
              $ref: '#/definitions/expression'
            type: array
          having:
            items:
              $ref: '#/definitions/criteria'
            type: array
          joins:
            items:
              properties:
                having:
                  items:
                    $ref: '#/definitions/criteria'
                  minItems: 1
                  type: array
                with:
                  $ref: '#/definitions/table'
              required:
                - with
                - having
              type: object
            type: array
          order-by:
            items:
              allOf:
                - $ref: '#/definitions/column'
                - properties:
                    sort:
                      enum:
                        - asc
                        - ascending
                        - desc
                        - descending
                      type: string
                  type: object
            type: array
          rows:
            properties:
              limit:
                type: number
              offset:
                type: number
            required:
              - limit
            type: object
          where:
            items:
              $ref: '#/definitions/criteria'
            type: array
        required:
          - from
          - columns
        type: object
    required:
      - select
    title: select
    type: object
    x-examples:
      example-1:
        select:
          columns:
            - column: '*'
          from:
            table: users
      example-10:
        select:
          columns:
            - column: '*'
          from:
            table: users
          rows:
            limit: 10
            offset: 10
      example-11:
        select:
          columns:
            - alias: s
              column: '*'
            - alias: u
              column: '*'
          from:
            - alias: s
              table: staff
            - alias: u
              table: users
          where:
            - eq:
                - alias: s
                  column: user_id
                - alias: u
                  column: id
      example-2:
        select:
          columns:
            - column: id
            - column: login
          from:
            table: users
      example-3:
        select:
          columns:
            - column: '*'
          from:
            table: users
          where:
            - not-null:
                column: verified
      example-4:
        select:
          columns:
            - column: '*'
          from:
            alias: u
            table: users
          joins:
            - having:
                - eq:
                    - alias: p
                      column: id
                    - alias: u
                      column: profile_id
              with:
                alias: p
                table: profiles
      example-5:
        select:
          columns:
            - func:
                - count
                - column: id
            - column: country
          from:
            table: users
          group-by:
            - column: country
      example-6:
        select:
          columns:
            - func:
                - count
                - column: id
            - column: country
          from:
            table: users
          group-by:
            - column: country
          having:
            - gt:
                - func:
                    - count
                    - column: id
                - 5
      example-7:
        select:
          columns:
            - column: '*'
          from:
            table: users
          order-by:
            - column: id
              sort: desc
      example-8:
        select:
          columns:
            - column: '*'
          from:
            table: users
          order-by:
            - column: id
              sort: desc
            - column: login
              sort: asc
      example-9:
        select:
          columns:
            - column: '*'
          from:
            table: users
          rows:
            limit: 10
    x-tags:
      - query
  subquery:
    description: SUBQUERY represents a SELECT (SQL select statement) as an EXPRESSION.
    properties:
      subquery:
        $ref: '#/definitions/select'
    required:
      - subquery
    title: subquery
    type: object
    x-examples:
      example-1:
        subquery:
          select:
            columns:
              - column: id
            from:
              table: users
      example-2:
        subquery:
          select:
            columns:
              - func:
                  - count
                  - column: id
            from:
              table: users
    x-tags:
      - query
  table:
    description: TABLE represents a DATABASE table reference.
    properties:
      alias:
        maxLength: 255
        type: string
      schema:
        maxLength: 255
        type: string
      table:
        maxLength: 255
        type: string
    required:
      - table
    title: table
    type: object
    x-examples:
      example-1:
        table: users
      example-2:
        alias: u
        table: users
    x-tags:
      - reference
  table-create:
    description: 'TABLE-CREATE will create a new, initially empty table in the current database.'
    properties:
      table-create:
        properties:
          columns:
            items:
              $ref: '#/definitions/column-definition'
            minItems: 1
            type: array
          name:
            maxLength: 255
            type: string
          query:
            $ref: '#/definitions/select'
          safe:
            type: boolean
          temp:
            type: boolean
        required:
          - name
        type: object
    required:
      - table-create
    title: table-create
    type: object
    x-examples:
      example-1:
        table-create:
          columns:
            - increment: true
              name: id
              primary: true
              type: integer
          name: users
      example-2:
        table-create:
          columns:
            - increment: true
              name: id
              primary: true
              type: integer
          name: removed_users
          safe: true
          temp: true
      example-3:
        table-create:
          name: removed_users
          query:
            select:
              columns:
                - column: id
                - column: login
              from:
                table: users
          safe: true
          temp: true
    x-tags:
      - query
  table-drop:
    description: TABLE-DROP removes tables from the database.
    properties:
      table-drop:
        properties:
          condition:
            enum:
              - cascade
              - restrict
            maxLength: 255
            type: string
          name:
            maxLength: 255
            type: string
          safe:
            type: boolean
        required:
          - name
        type: object
    required:
      - table-drop
    title: table-drop
    type: object
    x-examples:
      example-1:
        table-drop:
          name: users
      example-2:
        table-drop:
          name: users
          safe: true
      example-3:
        table-drop:
          condition: cascade
          name: users
          safe: true
    x-tags:
      - query
  table-rename:
    description: TABLE-RENAME changes the definition of an existing table.
    properties:
      table-rename:
        properties:
          name:
            properties:
              new:
                maxLength: 255
                type: string
              old:
                maxLength: 255
                type: string
            required:
              - new
              - old
            type: object
          safe:
            type: boolean
        required:
          - name
        type: object
    required:
      - table-rename
    title: table-rename
    type: object
    x-examples:
      example-1:
        table-rename:
          name:
            new: staff
            old: users
      example-2:
        table-rename:
          name:
            new: staff
            old: users
          safe: true
    x-tags:
      - query
  transaction:
    description: TRANSACTION represents a set of valid SQL statements to be executed within a database transaction.
    properties:
      transaction:
        properties:
          mode:
            items:
              maxLength: 255
              type: string
            type: array
          queries:
            items:
              $ref: '#/definitions/query'
            type: array
        required:
          - queries
        type: object
    required:
      - transaction
    title: transaction
    type: object
    x-examples:
      example-1:
        transaction:
          queries:
            - table-create:
                columns:
                  - name: id
                    primary: true
                    type: integer
                name: users
            - table-create:
                columns:
                  - name: id
                    primary: true
                    type: integer
                name: profiles
      example-2:
        transaction:
          mode:
            - deferrable
          queries:
            - table-create:
                columns:
                  - name: id
                    primary: true
                    type: integer
                name: users
            - table-create:
                columns:
                  - name: id
                    primary: true
                    type: integer
                name: profiles
    x-tags:
      - query
  type:
    default: string
    description: TYPE represents an acceptable SQL data type string.
    enum:
      - binary
      - boolean
      - char
      - date
      - datetime
      - datetime-wtz
      - decimal
      - double
      - enum
      - float
      - integer
      - integer-big
      - integer-big-unsigned
      - integer-medium
      - integer-medium-unsigned
      - integer-small
      - integer-small-unsigned
      - integer-tiny
      - integer-tiny-unsigned
      - integer-unsigned
      - json
      - number
      - string
      - text
      - text-long
      - text-medium
      - time
      - time-wtz
      - timestamp
      - timestamp-wtz
      - uuid
    maxLength: 255
    title: type
    type: string
    x-examples:
      example-1: binary
      example-2: boolean
      example-3: char
      example-4: date
      example-5: datetime
      example-6: datetime-wtz
      example-7: decimal
      example-8: double
      example-9: enum
      example-10: float
      example-11: integer
      example-12: integer-big
      example-13: integer-big-unsigned
      example-14: integer-medium
      example-15: integer-medium-unsigned
      example-16: integer-small
      example-17: integer-small-unsigned
      example-18: integer-tiny
      example-19: integer-tiny-unsigned
      example-20: integer-unsigned
      example-21: json
      example-22: number
      example-23: string
      example-24: text
      example-25: text-long
      example-26: text-medium
      example-27: time
      example-28: time-wtz
      example-29: timestamp
      example-30: timestamp-wtz
      example-31: uuid
    x-tags:
      - reference
  unary:
    description: UNARY is an EXPRESSION which uses the first EXPRESSION to perform a unary operation.
    properties:
      unary:
        oneOf:
          - properties:
              plus:
                $ref: '#/definitions/expression'
            required:
              - plus
          - properties:
              minus:
                $ref: '#/definitions/expression'
            required:
              - minus
        type: object
    required:
      - unary
    title: unary
    type: object
    x-examples:
      example-1:
        unary:
          plus: 1000
      example-2:
        unary:
          plus:
            column: amount
      example-3:
        unary:
          minus: 1000
      example-4:
        unary:
          minus:
            column: amount
    x-tags:
      - expression
  update:
    description: UPDATE changes the values of the specified columns in all rows that satisfy the condition.
    properties:
      update:
        properties:
          columns:
            items:
              allOf:
                - $ref: '#/definitions/column'
                - properties:
                    value:
                      $ref: '#/definitions/expression'
                  required:
                    - value
                  type: object
            type: array
          for:
            $ref: '#/definitions/table'
          where:
            items:
              $ref: '#/definitions/criteria'
            type: array
        required:
          - for
          - columns
        type: object
    required:
      - update
    title: update
    type: object
    x-examples:
      example-1:
        update:
          columns:
            - column: login
              value: admin
          for:
            table: users
          where:
            - not-null:
                column: verified
      example-2:
        update:
          columns:
            - column: login
              value: admin
            - column: password
              value: secret
          for:
            table: users
          where:
            - eq:
                - column: id
                - 1
      example-3:
        update:
          columns:
            - column: login
              value: admin
            - column: password
              value: secret
          for:
            table: users
          where:
            - eq:
                - column: id
                - subquery:
                    select:
                      columns:
                        - func:
                            - min
                            - column: id
                      from:
                        table: users
    x-tags:
      - query
  verbatim:
    description: VERBATIM represents a built-in SQL keyword (and optional arguments).
    properties:
      verbatim:
        items:
          $ref: '#/definitions/literal'
        type: array
    required:
      - verbatim
    title: verbatim
    type: object
    x-examples:
      example-1:
        verbatim:
          - 'NULL'
      example-2:
        verbatim:
          - NOT NULL
      example-3:
        verbatim:
          - CURRENT_TIMESTAMP
      example-4:
        verbatim:
          - TIMESTAMP
          - 2000-01-01 00:00:00
    x-tags:
      - expression
  view-create:
    description: VIEW-CREATE defines a view of a query.
    properties:
      view-create:
        properties:
          columns:
            items:
              properties:
                column:
                  maxLength: 255
                  type: string
              required:
                - column
              type: object
            type: array
          name:
            maxLength: 255
            type: string
          query:
            $ref: '#/definitions/select'
          safe:
            type: boolean
          temp:
            type: boolean
        required:
          - name
          - query
        type: object
    required:
      - view-create
    title: view-create
    type: object
    x-examples:
      example-1:
        view-create:
          name: active_users
          query:
            select:
              columns:
                - column: '*'
              from:
                table: users
              where:
                - not-null:
                    column: active
      example-2:
        view-create:
          name: active_users
          query:
            select:
              columns:
                - column: '*'
              from:
                table: users
              where:
                - not-null:
                    column: active
          safe: true
          temp: true
    x-tags:
      - query
  view-drop:
    description: VIEW-DROP drops an existing view.
    properties:
      view-drop:
        properties:
          name:
            maxLength: 255
            type: string
          safe:
            type: boolean
        required:
          - name
        type: object
    required:
      - view-drop
    title: view-drop
    type: object
    x-examples:
      example-1:
        view-drop:
          name: active_users
      example-2:
        view-drop:
          name: active_users
          safe: true
    x-tags:
      - query
oneOf:
  - $ref: '#/definitions/query'
  - $ref: '#/definitions/transaction'
